import chalk from "chalk";

/**
 * Class containing static methods for printing vulnerability-related messages.
 */
export class VulnerabilityMessages {
  /**
   * Prints a message for a detected React vulnerability related to the "dangerouslySetInnerHTML" property.
   *
   * @param srcUrl - The source URL where the vulnerability is detected.
   */
  public static printReactDangerouslySetInnerHTML(srcUrl: string) {
    console.log(
      "\n" +
      chalk.red(`React property "`) +
      chalk.red.bold(`dangerouslySetInnerHTML`) +
      chalk.red(`" found in `) +
      chalk.red.underline(`${srcUrl}`) +
      chalk.yellow(
        `\nThe dangerouslySetInnerHTML property in React is considered dangerous due to its potential to introduce a risk to XSS vulnerability. All forms of input in React are sanitized except for dangerouslySetInnerHTML. If not sanitized, dangerouslySetInnerHTML is a potential XSS vulnerability.\nSee more: `
      ) +
      chalk.yellow.underline(
        `https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html`
      ) +
      "\n"
    );
  }

  /**
   * Prints a message for a detected jQuery vulnerability related to the "load" method.
   *
   * @param srcUrl - The source URL where the vulnerability is detected.
   */
  public static printJqueryLoad(srcUrl: string) {
    console.log(
      "\n" +
      chalk.red(`jQuery method "`) +
      chalk.red.bold(`load`) +
      chalk.red(`" found in `) +
      chalk.red.underline(`${srcUrl}`) +
      chalk.yellow(
        `\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). The load() method fails to recognize and remove "<script>" HTML tags that contain a whitespace character, i.e., "</script >", resulting in the enclosed script logic being executed. This can lead to XSS attacks.\nSee more: `
      ) +
      chalk.yellow.underline(
        `https://security.snyk.io/vuln/SNYK-JS-JQUERY-569619`
      ) +
      "\n"
    );
  }

  /**
   * Prints a message for a detected jQuery-confirm vulnerability related to the "setIcon" method.
   *
   * @param srcUrl - The source URL where the vulnerability is detected.
   */
  public static printJqueryConfirm(srcUrl: string) {
    console.log(
      "\n" +
      chalk.red(`jQuery-confirm method "`) +
      chalk.red.bold(`setIcon`) +
      chalk.red(`" found in `) +
      chalk.red.underline(`${srcUrl}`) +
      chalk.yellow(
        `\nAll versions of this package are vulnerable to Cross-site Scripting (XSS). The setIcon() method fails to sanitize passed strings when an HTML tag is preceded by the ">" character. The following code successfully executes alert(0):\n$.confirm().setIcon('"><img src onerror="alert(0)"><"')\nSee more: `
      ) +
      chalk.yellow.underline(
        `https://security.snyk.io/vuln/SNYK-JS-JQUERYCONFIRM-548943`
      ) +
      "\n"
    );
  }

  /**
   * Prints a message for a detected Angular vulnerability related to the "angular.copy" utility function.
   *
   * @param srcUrl - The source URL where the vulnerability is detected.
   */
  public static printAngularCopy(srcUrl: string) {
    console.log(
      "\n" +
      chalk.red(`Angular utility function "`) +
      chalk.red.bold(`angular.copy()`) +
      chalk.red(`" found in `) +
      chalk.red.underline(`${srcUrl}`) +
      chalk.yellow(
        `\nAll versions of Angular are vulnerable to Regular Expression Denial of Service (ReDoS) via the angular.copy() utility function due to the usage of an insecure regular expression. Exploiting this vulnerability is possible by providing a large carefully-crafted input, resulting in catastrophic backtracking.\nSee more: `
      ) +
      chalk.yellow.underline(
        `https://security.snyk.io/vuln/SNYK-JS-ANGULAR-3373044`
      ) +
      "\n"
    );
  }

  /**
   * Prints a message for a detected Ember vulnerability related to the "emberObject.setProperties" method.
   *
   * @param srcUrl - The source URL where the vulnerability is detected.
   */
  public static printEmberSetProperties(srcUrl: string) {
    console.log(
      "\n" +
      chalk.red(`Ember object method "`) +
      chalk.red.bold(`emberObject.setProperties()`) +
      chalk.red(`" found in `) +
      chalk.red.underline(`${srcUrl}`) +
      chalk.yellow(
        `\nAffected versions of this package are vulnerable to Prototype Pollution by passing untrusted input as paths to EmberObject.setProperties or EmberObject.set. This can lead to unexpected behavior and security issues.\nSee more: `
      ) +
      chalk.yellow.underline(
        `https://security.snyk.io/vuln/SNYK-JS-EMBERSOURCE-3105813`
      ) +
      "\n"
    );
  }

  /**
   * Prints a message for a detected Ember vulnerability related to the "emberObject.set" method.
   *
   * @param srcUrl - The source URL where the vulnerability is detected.
   */
  public static printEmberSet(srcUrl: string) {
    console.log(
      "\n" +
      chalk.red(`Ember object method "`) +
      chalk.red.bold(`emberObject.set()`) +
      chalk.red(`" found in `) +
      chalk.red.underline(`${srcUrl}`) +
      chalk.yellow(
        `\nAffected versions of this package are vulnerable to Prototype Pollution by passing untrusted input as paths to EmberObject.setProperties or EmberObject.set. This can lead to unexpected behavior and security issues.\nSee more: `
      ) +
      chalk.yellow.underline(
        `https://security.snyk.io/vuln/SNYK-JS-EMBERSOURCE-3105813`
      ) +
      "\n"
    );
  }
}
